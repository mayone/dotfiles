# : << EOF

# -- general -------------------------------------------------------------------

set -g default-terminal "screen-256color"

set -g prefix2 C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix -2

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# -- display -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

# colors
black=colour0
grey=colour8
red=colour9
white=colour15
blue_1=colour21
dodger_blue_2=colour27
dodger_blue_1=colour33
deep_sky_blue_1=colour39
royal_blue_1=colour63
steel_blue=colour67
cornflower_blue=colour69
dark_red=colour88
stale_blue_1=colour99
sky_blue_2=colour111
red_3=colour160
dark_orange_3=colour166
orange_3=colour172
red_1=colour196
orange_red_1=colour202
dark_orange=colour208
gold_1=colour220
yellow_1=colour226
grey_3=colour232
grey_7=colour233
grey_11=colour234
grey_19=colour236
grey_50=colour244
grey_89=colour254
grey_93=colour255
#white="#e4e4e4"
#light_gray="#8a8a8a"
#dark_gray="#080808"
#light_blue="#00afff"

# set status bar
window_status_fg=$grey_93
window_status_bg=$black
window_theme_color=$deep_sky_blue_1
blank_style="#[fg=$window_status_bg,bg=$window_status_bg,none]"
set -g status-fg $window_status_fg
set -g status-bg $window_status_bg

# set -g status-left-length 50
set -g status-left "#[fg=$dark_orange_3,bg=$black]@#(hostname -s) [#(awk '{print $1,$2,$3}' /proc/loadavg)]"
set -g status-right "| Users: #(who | awk '{print $1}' | sort | uniq | wc -l) #[fg=$black,bg=$cornflower_blue] %Y/%m/%d #[fg=$yellow_1,bg=$grey_19] %T "

# redraw status line every 1 second
set -g status-interval 1

# left_separator_main=""
# left_separator_sub="|"
# right_separator_main=""
# right_separator_sub="|"
left_separator_main='\uE0B0'
left_separator_sub='\uE0B1'
right_separator_main='\uE0B2'
right_separator_sub='\uE0B3'


# default/last window style
# setw -g window-status-format " #I:#W#F "
format_style="#[fg=$grey,bg=default,none]"
format_fg_style="#[fg=$grey]"
last_format_fg_style="#[fg=$window_theme_color]"
separator_style="#[fg=$window_status_bg,bg=default,none]"
separator="$separator_style$left_separator_main"
window_status_format="$blank_style$left_separator_main$format_style#{?window_last_flag,$last_format_fg_style,$format_fg_style} #I $left_separator_sub #W $separator"

# highlight active window
format_style="#[fg=$grey_3,bg=$window_theme_color,none]"
separator_style="#[fg=$window_theme_color,bg=$window_status_bg,none]"
separator="$separator_style$left_separator_main"
window_status_current_format="$format_style$left_separator_main #I $left_separator_sub #W $separator"

run 'cut -c3- ~/.tmux.conf | sh -s _apply_theme'

# pane border
setw -g pane-border-style fg=$grey_19
setw -g pane-active-border-style fg=$window_theme_color

#set -g visual-bell on
#setw -g window-status-alert-fg red
#setw -g window-status-alert-bg yellow

# activity
setw -g monitor-activity on

# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# split current window horizontally
bind - split-window -v
# split current window vertically
bind _ split-window -h

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
#unbind n
#unbind p
#bind -r C-h previous-window # select previous window
#bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# enable Mouse mode
set -g mouse on
# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# support vi mode operation
setw -g mode-keys vi

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     current_pane_height=$(tmux display -t "$current_pane" -p "#{pane_height}")
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != x"$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
# }
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# _apply_theme() {
#   tmux setw -g window-status-format "$(_decode_unicode_escapes $window_status_format)"
#   tmux setw -g window-status-current-format "$(_decode_unicode_escapes $window_status_current_format)"
# }
#
# "$@"